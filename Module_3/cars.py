#!/usr/bin/env python3

import json
import locale
import sys
import reports
import os
import emails


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"total_sales": 0}
  sales_by_year = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item

    # TODO: also handle max sales
    # Calculate the car model which had the most sales.
    if item['total_sales'] > max_sales['total_sales']:
        max_sales['total_sales'] = item['total_sales']
        max_sales['car'] = item['car']


    # TODO: also handle most popular car_year
    # Calculate the most popular car_year across all car make/models.
    car_year = item['car']['car_year']
    sales_by_year[car_year] = sales_by_year.get(car_year, 0) + item['total_sales']

  most_popular_year = max(sales_by_year, key=sales_by_year.get)
  most_popular_year_sales = sales_by_year[most_popular_year]


  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} has the most sales: {}".format(format_car(max_sales['car']), max_sales['total_sales']),
    "The most popular year was {} with {} sales.".format(most_popular_year, most_popular_year_sales),
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)

  # TODO: turn this into a PDF report
  report_file = "/tmp/cars.pdf"
  report_title = "Sales summary for last month"
  report_info = "<br/>".join(summary) + "<br/>"
  report_table = cars_dict_to_table(data)
  #print(report_table[:8])
  sorted_table = sorted(report_table[1:], key=lambda x : x[-1], reverse = True)
  #print(sorted_table[:8])

  reports.generate(report_file, report_title, report_info, sorted_table)



  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com"
  recipient = "<user>@example.com"
  subject = report_title
  body = "\n".join(summary)
  attachment_path = report_file
  message = emails.generate(sender, recipient, subject, body, attachment_path)

  emails.send(message)


if __name__ == "__main__":
  main(sys.argv)





#!/usr/bin/env python3

import reportlab

from reportlab.platypus import SimpleDocTemplate
from reportlab.platypus import Paragraph, Spacer, Table, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors

def generate(filename, title, additional_info, table_data):
  styles = getSampleStyleSheet()
  report = SimpleDocTemplate(filename)
  report_title = Paragraph(title, styles["h1"])
  report_info = Paragraph(additional_info, styles["BodyText"])
  table_style = [('GRID', (0,0), (-1,-1), 1, colors.black),
                ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
                ('ALIGN', (0,0), (-1,-1), 'CENTER')]
  report_table = Table(data=table_data, style=table_style, hAlign="LEFT")
  empty_line = Spacer(1,20)
  report.build([report_title, empty_line, report_info, empty_line, report_table])





#!/usr/bin/env python3

import reportlab

from reportlab.platypus import SimpleDocTemplate
from reportlab.platypus import Paragraph, Spacer, Table, Image
  from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors

def generate(filename, title, additional_info, table_data):
  styles = getSampleStyleSheet()
  report = SimpleDocTemplate( filename)
  report_title = Paragraph(title, styles[" h1"] )
  report_info = Paragraph(additional_info, styles["BodyText"])
  table_style = [('GRID', (0,0), (-1,-1), 1, colors.black),
                ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
                ('ALIGN', (0,0), (-1,-1), 'CENTER')]
  report_table = Table(data=table_data, style=table_style, hAlign="LEFT")
  empty_line = Spacer(1,20)
  report.build([report_title, empty_line, report_info, empty_line, report_table])



from reportlab.graphics.shapes import Drawing
from reportlab.graphics.charts.piecharts import Pie

def pieChart(data):
    report_pie = Pie(width=400, height=400)
    report_pie.data = [item [-1] for i in data]
    report_pie.labels = [item [1] for i in data]

    report_chart = Drawing()
    report_chart.add(report_pie)

    return report_chart